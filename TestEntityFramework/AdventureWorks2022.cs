// Licence file C:\Users\skt90u\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using EntityFramework.Functions;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace TestEntityFramework
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IAdventureWorks2022 : IDisposable
    {
        DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        DbSet<Sales_Store> Sales_Stores { get; set; } // Store
        DbSet<Sales_VIndividualCustomer> Sales_VIndividualCustomers { get; set; } // vIndividualCustomer
        DbSet<Sales_VPersonDemographic> Sales_VPersonDemographics { get; set; } // vPersonDemographics
        DbSet<Sales_VSalesPerson> Sales_VSalesPersons { get; set; } // vSalesPerson
        DbSet<Sales_VSalesPersonSalesByFiscalYear> Sales_VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        DbSet<Sales_VStoreWithAddress> Sales_VStoreWithAddresses { get; set; } // vStoreWithAddresses
        DbSet<Sales_VStoreWithContact> Sales_VStoreWithContacts { get; set; } // vStoreWithContacts
        DbSet<Sales_VStoreWithDemographic> Sales_VStoreWithDemographics { get; set; } // vStoreWithDemographics

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public partial class AdventureWorks2022 : DbContext, IAdventureWorks2022
    {
        public DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        public DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public DbSet<Sales_Store> Sales_Stores { get; set; } // Store
        public DbSet<Sales_VIndividualCustomer> Sales_VIndividualCustomers { get; set; } // vIndividualCustomer
        public DbSet<Sales_VPersonDemographic> Sales_VPersonDemographics { get; set; } // vPersonDemographics
        public DbSet<Sales_VSalesPerson> Sales_VSalesPersons { get; set; } // vSalesPerson
        public DbSet<Sales_VSalesPersonSalesByFiscalYear> Sales_VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public DbSet<Sales_VStoreWithAddress> Sales_VStoreWithAddresses { get; set; } // vStoreWithAddresses
        public DbSet<Sales_VStoreWithContact> Sales_VStoreWithContacts { get; set; } // vStoreWithContacts
        public DbSet<Sales_VStoreWithDemographic> Sales_VStoreWithDemographics { get; set; } // vStoreWithDemographics

        static AdventureWorks2022()
        {
            System.Data.Entity.Database.SetInitializer<AdventureWorks2022>(null);
        }

        /// <inheritdoc />
        public AdventureWorks2022()
            : base("Name=AdventureWorks2022")
        {

        }

        /// <inheritdoc />
        public AdventureWorks2022(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public AdventureWorks2022(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public AdventureWorks2022(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public AdventureWorks2022(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public AdventureWorks2022(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Conventions.Add(new FunctionConvention<AdventureWorks2022>());

            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration());
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerConfiguration());
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicConfiguration());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonConfiguration());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicConfiguration());

            // Indexes
            modelBuilder.Entity<Sales_SpecialOffer>()
                .Property(e => e.Rowguid)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("AK_SpecialOffer_rowguid", 1) { IsUnique = true })
                );

            modelBuilder.Entity<Sales_SpecialOfferProduct>()
                .Property(e => e.ProductId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_SpecialOfferProduct_ProductID", 1))
                );

            modelBuilder.Entity<Sales_SpecialOfferProduct>()
                .Property(e => e.Rowguid)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("AK_SpecialOfferProduct_rowguid", 1) { IsUnique = true })
                );

            modelBuilder.Entity<Sales_Store>()
                .Property(e => e.SalesPersonId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_Store_SalesPersonID", 1))
                );

            modelBuilder.Entity<Sales_Store>()
                .Property(e => e.Rowguid)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("AK_Store_rowguid", 1) { IsUnique = true })
                );
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class AdventureWorks2022Factory : IDbContextFactory<AdventureWorks2022>
    {
        public AdventureWorks2022 Create()
        {
            return new AdventureWorks2022();
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // SpecialOffer
    /// <summary>
    /// Sale discounts lookup table.
    /// </summary>
    public class Sales_SpecialOffer
    {
        /// <summary>
        /// Primary key for SpecialOffer records.
        /// </summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        /// <summary>
        /// Discount description.
        /// </summary>
        public string Description { get; set; } // Description (length: 255)

        /// <summary>
        /// Discount precentage.
        /// </summary>
        public decimal DiscountPct { get; set; } // DiscountPct

        /// <summary>
        /// Discount type category.
        /// </summary>
        public string Type { get; set; } // Type (length: 50)

        /// <summary>
        /// Group the discount applies to such as Reseller or Customer.
        /// </summary>
        public string Category { get; set; } // Category (length: 50)

        /// <summary>
        /// Discount start date.
        /// </summary>
        public DateTime StartDate { get; set; } // StartDate

        /// <summary>
        /// Discount end date.
        /// </summary>
        public DateTime EndDate { get; set; } // EndDate

        /// <summary>
        /// Minimum discount percent allowed.
        /// </summary>
        public int MinQty { get; set; } // MinQty

        /// <summary>
        /// Maximum discount percent allowed.
        /// </summary>
        public int? MaxQty { get; set; } // MaxQty

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SpecialOfferProducts where [SpecialOfferProduct].[SpecialOfferID] point to this entity (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        public ICollection<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct.FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOffer()
        {
            DiscountPct = 0.00m;
            MinQty = 0;
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
            Sales_SpecialOfferProducts = new List<Sales_SpecialOfferProduct>();
        }
    }

    // SpecialOfferProduct
    /// <summary>
    /// Cross-reference table mapping products to special offer discounts.
    /// </summary>
    public class Sales_SpecialOfferProduct
    {
        /// <summary>
        /// Primary key for SpecialOfferProduct records.
        /// </summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        /// <summary>
        /// Product identification number. Foreign key to Product.ProductID.
        /// </summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SpecialOffer pointed by [SpecialOfferProduct].([SpecialOfferId]) (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        public Sales_SpecialOffer Sales_SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOfferProduct()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
        }
    }

    // Store
    /// <summary>
    /// Customers (resellers) of Adventure Works products.
    /// </summary>
    public class Sales_Store
    {
        /// <summary>
        /// Primary key. Foreign key to Customer.BusinessEntityID.
        /// </summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        /// <summary>
        /// Name of the store.
        /// </summary>
        public string Name { get; set; } // Name (length: 50)

        /// <summary>
        /// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
        /// </summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        /// <summary>
        /// Demographic informationg about the store such as the number of employees, annual sales and store type.
        /// </summary>
        public string Demographics { get; set; } // Demographics

        /// <summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        /// </summary>
        public Guid Rowguid { get; set; } // rowguid

        /// <summary>
        /// Date and time the record was last updated.
        /// </summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        public Sales_Store()
        {
            Rowguid = Guid.NewGuid();
            ModifiedDate = DateTime.Now;
        }
    }

    // vIndividualCustomer
    public class Sales_VIndividualCustomer
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (Primary key) (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)
        public string AddressType { get; set; } // AddressType (Primary key) (length: 50)
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (Primary key) (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)
        public string Demographics { get; set; } // Demographics
    }

    // vPersonDemographics
    public class Sales_VPersonDemographic
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public decimal? TotalPurchaseYtd { get; set; } // TotalPurchaseYTD
        public DateTime? DateFirstPurchase { get; set; } // DateFirstPurchase
        public DateTime? BirthDate { get; set; } // BirthDate
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)
        public string YearlyIncome { get; set; } // YearlyIncome (length: 30)
        public string Gender { get; set; } // Gender (length: 1)
        public int? TotalChildren { get; set; } // TotalChildren
        public int? NumberChildrenAtHome { get; set; } // NumberChildrenAtHome
        public string Education { get; set; } // Education (length: 30)
        public string Occupation { get; set; } // Occupation (length: 30)
        public bool? HomeOwnerFlag { get; set; } // HomeOwnerFlag
        public int? NumberCarsOwned { get; set; } // NumberCarsOwned
    }

    // vSalesPerson
    public class Sales_VSalesPerson
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (Primary key) (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (Primary key) (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)
        public string TerritoryName { get; set; } // TerritoryName (length: 50)
        public string TerritoryGroup { get; set; } // TerritoryGroup (length: 50)
        public decimal? SalesQuota { get; set; } // SalesQuota
        public decimal SalesYtd { get; set; } // SalesYTD (Primary key)
        public decimal SalesLastYear { get; set; } // SalesLastYear (Primary key)
    }

    // vSalesPersonSalesByFiscalYears
    public class Sales_VSalesPersonSalesByFiscalYear
    {
        public int? SalesPersonId { get; set; } // SalesPersonID
        public string FullName { get; set; } // FullName (length: 152)
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)
        public string SalesTerritory { get; set; } // SalesTerritory (Primary key) (length: 50)
        public decimal? C2002 { get; set; } // 2002
        public decimal? C2003 { get; set; } // 2003
        public decimal? C2004 { get; set; } // 2004
    }

    // vStoreWithAddresses
    public class Sales_VStoreWithAddress
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string AddressType { get; set; } // AddressType (Primary key) (length: 50)
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (Primary key) (length: 30)
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)
    }

    // vStoreWithContacts
    public class Sales_VStoreWithContact
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string ContactType { get; set; } // ContactType (Primary key) (length: 50)
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (Primary key) (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)
    }

    // vStoreWithDemographics
    public class Sales_VStoreWithDemographic
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public decimal? AnnualSales { get; set; } // AnnualSales
        public decimal? AnnualRevenue { get; set; } // AnnualRevenue
        public string BankName { get; set; } // BankName (length: 50)
        public string BusinessType { get; set; } // BusinessType (length: 5)
        public int? YearOpened { get; set; } // YearOpened
        public string Specialty { get; set; } // Specialty (length: 50)
        public int? SquareFeet { get; set; } // SquareFeet
        public string Brands { get; set; } // Brands (length: 30)
        public string Internet { get; set; } // Internet (length: 30)
        public int? NumberEmployees { get; set; } // NumberEmployees
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // SpecialOffer
    public class Sales_SpecialOfferConfiguration : EntityTypeConfiguration<Sales_SpecialOffer>
    {
        public Sales_SpecialOfferConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferConfiguration(string schema)
        {
            ToTable("SpecialOffer", schema);
            HasKey(x => x.SpecialOfferId);

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.DiscountPct).HasColumnName(@"DiscountPct").HasColumnType("smallmoney").IsRequired();
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired();
            Property(x => x.MinQty).HasColumnName(@"MinQty").HasColumnType("int").IsRequired();
            Property(x => x.MaxQty).HasColumnName(@"MaxQty").HasColumnType("int").IsOptional();
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // SpecialOfferProduct
    public class Sales_SpecialOfferProductConfiguration : EntityTypeConfiguration<Sales_SpecialOfferProduct>
    {
        public Sales_SpecialOfferProductConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferProductConfiguration(string schema)
        {
            ToTable("SpecialOfferProduct", schema);
            HasKey(x => new { x.SpecialOfferId, x.ProductId });

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Sales_SpecialOffer).WithMany(b => b.Sales_SpecialOfferProducts).HasForeignKey(c => c.SpecialOfferId).WillCascadeOnDelete(false); // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
        }
    }

    // Store
    public class Sales_StoreConfiguration : EntityTypeConfiguration<Sales_Store>
    {
        public Sales_StoreConfiguration()
            : this("Sales")
        {
        }

        public Sales_StoreConfiguration(string schema)
        {
            ToTable("Store", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").HasColumnType("int").IsOptional();
            Property(x => x.Demographics).HasColumnName(@"Demographics").HasColumnType("xml").IsOptional();
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // vIndividualCustomer
    public class Sales_VIndividualCustomerConfiguration : EntityTypeConfiguration<Sales_VIndividualCustomer>
    {
        public Sales_VIndividualCustomerConfiguration()
            : this("Sales")
        {
        }

        public Sales_VIndividualCustomerConfiguration(string schema)
        {
            ToTable("vIndividualCustomer", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.EmailPromotion, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(15).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Demographics).HasColumnName(@"Demographics").HasColumnType("xml").IsOptional();
        }
    }

    // vPersonDemographics
    public class Sales_VPersonDemographicConfiguration : EntityTypeConfiguration<Sales_VPersonDemographic>
    {
        public Sales_VPersonDemographicConfiguration()
            : this("Sales")
        {
        }

        public Sales_VPersonDemographicConfiguration(string schema)
        {
            ToTable("vPersonDemographics", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.TotalPurchaseYtd).HasColumnName(@"TotalPurchaseYTD").HasColumnType("money").IsOptional();
            Property(x => x.DateFirstPurchase).HasColumnName(@"DateFirstPurchase").HasColumnType("datetime").IsOptional();
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime").IsOptional();
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("nvarchar").IsOptional().HasMaxLength(1);
            Property(x => x.YearlyIncome).HasColumnName(@"YearlyIncome").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar").IsOptional().HasMaxLength(1);
            Property(x => x.TotalChildren).HasColumnName(@"TotalChildren").HasColumnType("int").IsOptional();
            Property(x => x.NumberChildrenAtHome).HasColumnName(@"NumberChildrenAtHome").HasColumnType("int").IsOptional();
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.HomeOwnerFlag).HasColumnName(@"HomeOwnerFlag").HasColumnType("bit").IsOptional();
            Property(x => x.NumberCarsOwned).HasColumnName(@"NumberCarsOwned").HasColumnType("int").IsOptional();
        }
    }

    // vSalesPerson
    public class Sales_VSalesPersonConfiguration : EntityTypeConfiguration<Sales_VSalesPerson>
    {
        public Sales_VSalesPersonConfiguration()
            : this("Sales")
        {
        }

        public Sales_VSalesPersonConfiguration(string schema)
        {
            ToTable("vSalesPerson", schema);
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.JobTitle, x.EmailPromotion, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName, x.SalesYtd, x.SalesLastYear });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(15).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.TerritoryName).HasColumnName(@"TerritoryName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TerritoryGroup).HasColumnName(@"TerritoryGroup").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").HasColumnType("money").IsOptional();
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").HasColumnType("money").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").HasColumnType("money").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // vSalesPersonSalesByFiscalYears
    public class Sales_VSalesPersonSalesByFiscalYearConfiguration : EntityTypeConfiguration<Sales_VSalesPersonSalesByFiscalYear>
    {
        public Sales_VSalesPersonSalesByFiscalYearConfiguration()
            : this("Sales")
        {
        }

        public Sales_VSalesPersonSalesByFiscalYearConfiguration(string schema)
        {
            ToTable("vSalesPersonSalesByFiscalYears", schema);
            HasKey(x => new { x.JobTitle, x.SalesTerritory });

            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").HasColumnType("int").IsOptional();
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(152);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SalesTerritory).HasColumnName(@"SalesTerritory").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.C2002).HasColumnName(@"2002").HasColumnType("money").IsOptional();
            Property(x => x.C2003).HasColumnName(@"2003").HasColumnType("money").IsOptional();
            Property(x => x.C2004).HasColumnName(@"2004").HasColumnType("money").IsOptional();
        }
    }

    // vStoreWithAddresses
    public class Sales_VStoreWithAddressConfiguration : EntityTypeConfiguration<Sales_VStoreWithAddress>
    {
        public Sales_VStoreWithAddressConfiguration()
            : this("Sales")
        {
        }

        public Sales_VStoreWithAddressConfiguration(string schema)
        {
            ToTable("vStoreWithAddresses", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.AddressType, x.AddressLine1, x.City, x.StateProvinceName, x.PostalCode, x.CountryRegionName });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(15).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CountryRegionName).HasColumnName(@"CountryRegionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // vStoreWithContacts
    public class Sales_VStoreWithContactConfiguration : EntityTypeConfiguration<Sales_VStoreWithContact>
    {
        public Sales_VStoreWithContactConfiguration()
            : this("Sales")
        {
        }

        public Sales_VStoreWithContactConfiguration(string schema)
        {
            ToTable("vStoreWithContacts", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name, x.ContactType, x.FirstName, x.LastName, x.EmailPromotion });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactType).HasColumnName(@"ContactType").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
            Property(x => x.PhoneNumberType).HasColumnName(@"PhoneNumberType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // vStoreWithDemographics
    public class Sales_VStoreWithDemographicConfiguration : EntityTypeConfiguration<Sales_VStoreWithDemographic>
    {
        public Sales_VStoreWithDemographicConfiguration()
            : this("Sales")
        {
        }

        public Sales_VStoreWithDemographicConfiguration(string schema)
        {
            ToTable("vStoreWithDemographics", schema);
            HasKey(x => new { x.BusinessEntityId, x.Name });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AnnualSales).HasColumnName(@"AnnualSales").HasColumnType("money").IsOptional();
            Property(x => x.AnnualRevenue).HasColumnName(@"AnnualRevenue").HasColumnType("money").IsOptional();
            Property(x => x.BankName).HasColumnName(@"BankName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BusinessType).HasColumnName(@"BusinessType").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.YearOpened).HasColumnName(@"YearOpened").HasColumnType("int").IsOptional();
            Property(x => x.Specialty).HasColumnName(@"Specialty").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SquareFeet).HasColumnName(@"SquareFeet").HasColumnType("int").IsOptional();
            Property(x => x.Brands).HasColumnName(@"Brands").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Internet).HasColumnName(@"Internet").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.NumberEmployees).HasColumnName(@"NumberEmployees").HasColumnType("int").IsOptional();
        }
    }


    #endregion

}
// </auto-generated>
